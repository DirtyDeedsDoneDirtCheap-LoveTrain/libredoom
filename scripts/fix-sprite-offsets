#!/usr/bin/env python
# SPDX-License-Identifier: BSD-3-Clause

from os import path
import sys
import glob
import struct
import png

class Graphic(object):
    def __init__(self, filepath):
        self.filepath = filepath
        self.filename = path.split(filepath)[1]
        self.name = path.splitext(self.filename)[0].upper().replace('^', '\\')
        self.has_offset = False
        self.get_png_offset()

    def get_png_offset(self):
        reader = png.Reader(file=open(self.filepath, "rb"))
        for chunk in reader.chunks():
            if chunk[0] == "grAb":
                self.xoffset, self.yoffset = struct.unpack(">II", chunk[1])
                self.has_offset = True

def main():
    dirname = path.split(path.abspath(__file__))[0]
    if len(sys.argv) < 2:
        print("This script takes the offsets stored in the \"grAb\" chunk of " + 
              "the specified PNGs and adjusts the sprite offsets in the build_cfg file.\n")
        print("Usage:\n fix-sprite-offsets <names> [names] [...]\n")
        print("names may have * wildcards, like \"vile* pisg*\" " )
        exit()
    graphics = []
    files = []
    for param in sys.argv[1:]:
        if param == "*":
            print("Cannot have generic wildcard *, you have to put something in front of it.")
            print("e.g. vile*")
            exit()
        else:
            files = files + glob.glob(dirname + "/../sprites/" + param)
            files = files + glob.glob(dirname + "/../graphics/" + param)

    for filepath in files:
        graphics.append(Graphic(filepath))

    f = open(dirname + "/../buildcfg.txt", "r")
    lines = f.readlines()
    f.close()
    newlines = []
    for line in lines:
        replaced_line = False
        for graphic in graphics:
            if graphic.has_offset is True:
                thing = line.split()
                if len(thing) > 0 and thing[0] == graphic.name:
                    new_string = "%s\t%i\t%i" %(graphic.name, graphic.xoffset, graphic.yoffset)
                    comments = line.split(";")
                    if len(comments) > 1:
                        new_string += "\t;" + "".join(comments[1:])
                    else:
                        new_string += "\n"
                    newlines.append(new_string)
                    replaced_line = True
                    print("Updated " + graphic.name + " offsets")
                    break
        if replaced_line is False:
            newlines.append(line)
    f = open(dirname + "/../buildcfg.txt", "w")
    f.writelines(newlines)
    f.close()

if __name__ == '__main__':
    main()
